service: authentication
frameworkVersion: ^4.1.0
plugins:
  - serverless-middleware
custom:
  tableNameUsers: "users-table-${sls:stage}"
  tableNameRoles: "roles-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [RolesTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableNameUsers}
    ROLES_TABLE: ${self:custom.tableNameRoles}
    SECRET_KET:

functions:
  api:
    handler: index.handler
    events:
      - httpApi: "*"
    middleware:
      pos:
        - catch: middlewares/handler.handlerError
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNameUsers}
    RolesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: roleId
            AttributeType: S
        KeySchema:
          - AttributeName: roleId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNameRoles}
